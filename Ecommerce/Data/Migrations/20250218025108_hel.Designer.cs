// <auto-generated />
using System;
using Ecommerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250218025108_hel")]
    partial class hel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Models.AppLocationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Appetizer"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Entree"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Side Dish"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Dessert"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Beverage"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Sweet onion Chicken"
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Grilled Chicken"
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Fish"
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Roast Beef"
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Potato"
                        },
                        new
                        {
                            IngredientId = 6,
                            Name = "Corn"
                        },
                        new
                        {
                            IngredientId = 7,
                            Name = "Lettuce"
                        },
                        new
                        {
                            IngredientId = 8,
                            Name = "Tomato"
                        },
                        new
                        {
                            IngredientId = 9,
                            Name = "Onions"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecommerce.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "A delicious Sweet Onion Teryaki Sandwich",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Sweet onion Chicken Sandwich",
                            Price = 13.25m,
                            Stock = 100
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Baked Chicken Wings. These supereasy baked chicken wings use just a few ingredients and four simple steps",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Baked Chicken",
                            Price = 10.25m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Baked Chicken Wings. These supereasy baked chicken wings use just a few ingredients and four simple steps",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Baked Chicken",
                            Price = 10.25m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Description = "Baked Roasted Beef. These supereasy baked Beef wings use just a few ingredients and four simple steps",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Roasted Beef",
                            Price = 10.25m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Description = "A delicious chicken and Bacon",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Chicken and Bacon Sandwich",
                            Price = 14.05m,
                            Stock = 70
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "A delicious Chicken Cheese Rice Bowl",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Chicken Cheese Rice Bowl",
                            Price = 9.58m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Description = "A delicious Chicken Biryani",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Chicken Biryani",
                            Price = 9.58m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "A juicy beef patty with fresh lettuce, tomato, and cheese",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Classic Beef Burger",
                            Price = 8.99m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Description = "A delicious pizza topped with fresh vegetables and mozzarella cheese",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Veggie Delight Pizza",
                            Price = 12.49m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Description = "Crispy chicken wings tossed in a spicy buffalo sauce",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Spicy Chicken Wings",
                            Price = 7.99m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2,
                            Description = "Fresh romaine lettuce with Caesar dressing, parmesan, and croutons",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Caesar Salad",
                            Price = 6.99m,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2,
                            Description = "A warm chocolate cake with a molten chocolate center",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Chocolate Lava Cake",
                            Price = 5.49m,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 2,
                            Description = "A creamy milkshake blended with fresh strawberries",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Strawberry Milkshake",
                            Price = 4.99m,
                            Stock = 45
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 2,
                            Description = "Grilled salmon fillet served with lemon butter sauce",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Grilled Salmon",
                            Price = 14.99m,
                            Stock = 15
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2,
                            Description = "Crispy golden fries served with ketchup",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "French Fries",
                            Price = 3.99m,
                            Stock = 60
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 2,
                            Description = "A refreshing smoothie made with ripe mangoes",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Mango Smoothie",
                            Price = 5.99m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 3,
                            Description = "Crispy garlic-infused bread with melted butter and herbs",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Garlic Bread",
                            Price = 4.49m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 3,
                            Description = "Crispy battered onion rings served with a tangy dipping sauce",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Onion Rings",
                            Price = 5.99m,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 3,
                            Description = "Deep-fried mozzarella cheese sticks with marinara sauce",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Cheesy Mozzarella Sticks",
                            Price = 6.49m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 3,
                            Description = "Freshly shredded cabbage and carrots in a creamy dressing",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Coleslaw",
                            Price = 3.99m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 3,
                            Description = "Creamy mashed potatoes with butter and a hint of garlic",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Mashed Potatoes",
                            Price = 4.99m,
                            Stock = 45
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 3,
                            Description = "Crispy potato skins topped with cheese, bacon, and sour cream",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Loaded Potato Skins",
                            Price = 7.49m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3,
                            Description = "A healthy mix of steamed seasonal vegetables",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Steamed Vegetables",
                            Price = 5.49m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 3,
                            Description = "Grilled bread topped with fresh tomatoes, basil, and olive oil",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Bruschetta",
                            Price = 6.99m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 3,
                            Description = "Mushroom caps stuffed with cheese, herbs, and breadcrumbs",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Stuffed Mushrooms",
                            Price = 7.99m,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 3,
                            Description = "Fresh corn on the cob served with melted butter",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Corn on the Cob",
                            Price = 3.49m,
                            Stock = 60
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 4,
                            Description = "A warm chocolate cake with a molten chocolate center",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Chocolate Lava Cake",
                            Price = 5.99m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 4,
                            Description = "Classic creamy cheesecake with a graham cracker crust",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "New York Cheesecake",
                            Price = 6.49m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 4,
                            Description = "Layered Italian dessert with coffee-soaked ladyfingers and mascarpone cream",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Tiramisu",
                            Price = 7.99m,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 4,
                            Description = "Rich chocolate brownie topped with vanilla ice cream and chocolate syrup",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Brownie Sundae",
                            Price = 6.99m,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 4,
                            Description = "Classic apple pie with a flaky golden crust",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Apple Pie",
                            Price = 5.49m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 4,
                            Description = "Silky Italian dessert topped with fresh berry sauce",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Panna Cotta",
                            Price = 6.79m,
                            Stock = 28
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 5,
                            Description = "Refreshing lemonade made with fresh lemons and a hint of mint",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Classic Lemonade",
                            Price = 3.99m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 5,
                            Description = "Chilled brewed coffee served with milk and sweetener",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Iced Coffee",
                            Price = 4.49m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 5,
                            Description = "Chilled brewed coffee served with milk and sweetener",
                            ImageUrl = "https://via.placeholder.com/50",
                            Name = "Iced Coffee shake",
                            Price = 4.49m,
                            Stock = 40
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 10,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 15,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 14,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 17,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 18,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 19,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 21,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 23,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 23,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 23,
                            IngredientId = 9
                        },
                        new
                        {
                            ProductId = 26,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 27,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 35,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 34,
                            IngredientId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.HasOne("Ecommerce.Models.AppLocationUser", "User")
                        .WithMany("orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Models.Order", "Order")
                        .WithMany("orderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Product", "product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.HasOne("Ecommerce.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Models.ProductIngredient", b =>
                {
                    b.HasOne("Ecommerce.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.AppLocationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.AppLocationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.AppLocationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.AppLocationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.AppLocationUser", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("Ecommerce.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
